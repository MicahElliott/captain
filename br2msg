#! /bin/zsh

# Convert current branch name into commit message, and add some boilerplate
# This should be used as a prepare-commit-msg trigger

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# FIXME might need to bail out if COMMIT_SOURCE != 'template', since 'message' is showing in problematic rebase case

# print $1 :: $2 :: $3

if [[ $OSTYPE == darwin* ]]
then ssed() { gsed $@ ; }
else ssed() { sed $@ ; }
fi

ex=mde/SCRUM-12345_FEAT_mytopic_some-detail-words
ex=mde/SCRUM-12345_FEAT_some-detail-words
becomes='feat: (SCRUM-12345) [mytopic] Some detail words'

branch=$(git rev-parse --abbrev-ref HEAD)

if [[ $branch =~ 'master|main|dev|development' ]]; then
    print 'not operating on non-feature branch'
    exit
fi

# arr=${1:gs/_/ }
arr=${branch:gs/_/ }
arr=( $=arr )
if [[ $#arr == 4 ]]; then
    topic=" "[$arr[3]"]" sentence=$arr[4]
else
    sentence=$arr[3]
fi
story=$(ssed -r -e 's^.*/^^' <<<$arr[1]) # SCRUM-12345

# Modify pre-prepped git file (.git/COMMIT_EDITMSG) in-place effectively
ssed -i "1i${(L)arr[2]}: ($story)$topic ${sentence:gs/-/ }\n" $COMMIT_MSG_FILE
ssed -i "3iREPLACE THIS TEXT WITH A PARAGRAPH DESCRIPTION OF THE CHANGE.\n" $COMMIT_MSG_FILE

# $(cat $COMMIT_MSG_FILE) > $COMMIT_MSG_FILE

# print "This is the first line\n$(cat x.txt)" >x.txt
