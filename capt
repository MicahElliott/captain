#! /bin/zsh

# capt: a very simple git-hook manager

dbg() { [[ -n $CAPT_VERBOSE ]] && print $@ }
aye() { print '(◕‿-)' $@ }

reporoot=$(git rev-parse --show-toplevel)
if [[ $reporoot != $PWD ]]; then
    aye "Captain only runs from yer repo root: $reporoot"; exit 1
fi

if [[ $#@ < 1 ]]; then
    aye 'Captain needs arrrgs!'; exit 1
fi


print_banner() {
    # print '(◕‿-) Shiver me timbers!'
    print '(◕‿-) CAPTAIN IS OVERHAULIN. NO QUARTER!'
    print '       _________'
    print '      |-_ .-. _-|'
    print '      |  (*^*)  |'
    print '      |_-"|H|"-_|'
    print }

print_banner

hooksdir=${CAPT_HOOKSDIR-.git/hooks}
scriptsdir=${CAPT_SCRIPTSDIR-.captscripts}
captfile=${CAPT_FILE-capt.zsh}
captfilelocal=${CAPT_LOCALFILE-captlocal.zsh}
path+=$scriptsdir

if [[ ! -f $captfile ]]; then print "Unable to load CAPT_FILE $captfile"; exit 1; fi
aye "Loadin the gunwales: $PWD/$captfile\n"

active_githook=$1
aye "=== ${(U)active_githook} ==="

# Built-in hooks
typeset -A builtin_cannons=(
    'markdownlint' '(md|mkd|markdown)'
    'clj-kondo'    '(clj|cljc|cljs)'
)

get_exts() {}
filter_md='{md,mkd,markdown}'

setup_changes() {
    # Set up vars to be available in proj capt.zsh
    # VALUEADD Magic to figure out main v master and get changed files
    main_branch=$(git branch | grep '*' | cut -f2 -d' ')
    CAPT_FILES_CHANGED=( $(git diff --name-only --cached origin/$main_branch) )
}

capt_play_alert() {
    if [[ $OSTYPE = linux-gnu ]]; then
        player=play
    elif [[ $OSTYPE =~ darwin ]]; then
        player=afplay
    else
        aye "Can't find audio player for alerting; falling back to beep."
        player=beep
    fi
    $player $@ }

setup_changes

# Run the scripts from control file
run_scripts () {
    # TODO check for existence of specified hook
    aye "Execution awaits!"
    # Print out all the scripts about to be run
    for line in $@; do
        [[ $line == *:* ]] && aye "- ${${(@s/:/)line}[1]}" || aye "- $line"
    done
    for line in $@; do
        inv=( ${(@s: :)line} ) # split on spaces to get first
        name=$inv[1]
        prog=$inv[2]
        cmd=${line#* } # remove up to first space

        # Built-in has filter already, or specified filter
        print_name=$(sed 's/(.*//' <<<$name)
        print
        aye "??? ${(U)print_name} ???"
        if [[ ! $name == *: ]]; then
            prog=$inv[1]
            just_buitins=${(k)builtin_cannons}
            if ! (($just_buitins[(Ie)$name])); then aye "Unable to find built-in:" $name; exit 1; fi
            filtered_files=( $(grep -E "\.$builtin_cannons[$name]" <<<$CAPT_FILES_CHANGED) )
            cmd="$prog $filtered_files"
            if [[ $#filtered_files < 1 ]]; then aye "Not seein any files staged, skippin."; continue
            else
                aye "Filtered files under siege:" $filtered_files
                aye "Aimin our built-in cannon: $name"
            fi
        elif [[ $name == *(*)* ]]; then
            filter=$(sed 's/.*(/(/;s/://' <<<$name) # remove front name and trailing :
            dbg filter: $filter
            dbg CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
            filtered_files=( $(print -l $CAPT_FILES_CHANGED | grep -E "\.$filter") )
            CAPT_FILES_CHANGED=$filtered_files
            if [[ $#filtered_files < 1 ]]; then aye "Not seein any files staged, skippin."; continue
            else
                aye "Filtered files under siege:" $filtered_files
                aye "Aimin yer custom-rigged cannon: $name $cmd"
            fi
        elif [[ $line == *CAPT_FILES_CHANGED* || ! $name == *: ]]; then
            if [[ $#filtered_files < 1 ]]; then aye "Not seein any files staged, skippin."; continue
            else
                aye "Files under siege:" $CAPT_FILES_CHANGED
                aye "Ahoy! Blastin yer cannon with yer files: $name" $cmd
            fi
        else
            aye "Ye took care of file selection yerself, er no files needin fer sayin."
            aye "Ahoy! Blastin yer cannon: $name" $cmd
        fi

        # Work with either a local script or something found on path
        if [[ -f $scriptsdir/$prog ]]; then eval $scriptsdir/$cmd
        elif type $prog >/dev/null;    then eval $cmd
        # Just skip this one hook if ccommand not found
        else aye "Skippin on yer $name $prog be lost at sea."
        fi
        es=$?
        wait # don't process until background scripts are finished
        # Bail out on whole run if any script not successful
        if [[ $es -ne 0 ]]; then
            aye '<>_<> (-_- ;) \(ˆ˚ˆ)/  くコ:彡 ˚∆˚ Shiver me timbers, down to Davey Jones locker! Status:' $es; print; exit $es
        else
            aye '✓✓✓ SURVIVAL! ✓✓✓'
        fi
    done }

# Run a set of scripts based on which hook is active
select_hook() {
    case $active_githook in
        pre-commit)         run_scripts $pre_commit ;;
        commit-msg)         run_scripts $commit_msg ;;
        post-commit)        run_scripts $post_commit ;;
        prepare-commit-msg) run_scripts $prepare_commit_msg ;;
        post-checkout)      run_scripts $post_checkout ;;
        *)                  run_scripts $1 ;;
    esac }

### Main

# Run team-wide repo hooks
source $captfile
select_hook

# Optionally run user hooks if they exist
if [[ -f $captfilelocal ]]; then
    # Run user-local hooks
    aye "Next on the plank: user-local hook scripts"
    source $captfilelocal
    select_hook
fi

# Show successful completion
print
aye 'Show a leg!'
