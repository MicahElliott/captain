#! /bin/zsh

# capt: a very simple git-hook manager

# Symbols fer usin:  ⚔ ⚳ ⚑ ☁ ☀ ✓ ☠ ◴◵◶◷

# Save the incoming git-hook arg(s)
GITARG1=$argv[2] GITARG2=$argv[3] GITARG3=$argv[4]
# print all args: $@

captversion=v2025.01.09
captdir=${CAPT_DIR-.capt}
hooksdir=${CAPT_HOOKSDIR-$captdir/hooks}
scriptsdir=${CAPT_SCRIPTSDIR-$captdir/scripts}
captfile=${CAPT_FILE-$captdir/share.sh}
captfilelocal=${CAPT_LOCALFILE-.capt/local.sh}
timeout=${CAPT_TIMEOUT-10}
path+=$scriptsdir
hookfiles=( # Supported hooks
    pre-commit prepare-commit-msg commit-msg post-commit post-checkout
    pre-push post-rewrite )

# Why isn't this necessary?? https://stackoverflow.com/questions/57659657/zsh-colours-only-work-when-command-used-in-terminal-directly
autoload -U colors; colors
# Add custom colors to array for later use
fg[orange]='\e[0;38;5;208m'
fg_bold[orange]='\e[1;38;5;208m'

icon='(◕‿-)'
dbg() { [[ -n $CAPT_DEBUG ]] && print "$fg[cyan]DEBUG:" $@ $reset_color }
aye()  { print    "$reset_color$fg_bold[blue]$icon$reset_color" $@ }
ayen() { print -n "$reset_color$fg_bold[blue]$icon$reset_color" $@ } # no newline

[[ -n $CAPT_DISABLE ]] && { print 'Sailin right past yer captain with CAPT_DISABLE bein set.'; exit }

# Convert CSVs to arrays for easier use
black_triggers=( ${(s:,:)CAPT_BLACK_TRIGGERS} )
black_hooks=(    ${(s:,:)CAPT_BLACK_HOOKS}    )

# Bail out immediately if rebase in progress
# https://stackoverflow.com/questions/3921409/how-to-know-if-there-is-a-git-rebase-in-progress
# FIXME This branch detection could definitely be better!
branch=$(git branch -vv | head -1) # * (no branch, rebasing ...
if [[ $branch =~ '\* \(no branch, rebasing' ]] ||
       test -d "$(git rev-parse --git-path rebase-merge)" ||
       test -d "$(git rev-parse --git-path rebase-apply)"
then
    aye 'Must be in a rebase, exiting.'
    exit
else
    : print "FIXME PLEASE (rebase debugging for br2msg): branch: $branch"
fi

autoload colors; colors

# Use s* to mean "system" as in "sgrep" -> "system grep"
if [[ $OSTYPE == darwin* ]] ; then
    if ! type ggrep >/dev/null; then
        print 'Detected that GNU coreutils et al are not installed. You should run:'
        print 'brew install coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep'
        exit 1
    else
        sdate() { gdate $@ }
        sgrep() { ggrep $@ }
        ssed()  { gsed $@ }
        splayer() { afplay $@ }
    fi
else
    sdate() { date $@ }
    sgrep() { grep $@ }
    ssed()  { sed $@ }
    splayer() { play $@ }
fi

# Built-in convenience checkers
# keys are for lookups
# values are an optional filter, followed by a command to run
# TODO May need a way/syntax to let checks run but ignore that they fail; IOW, proceed despite failure
typeset -A builtin_cannons=(
    mdlint         '(md|mkd|markdown)mdl $CAPT_FILES_CHANGED'
    cljlint        '(clj|cljc|cljs)clj-kondo --lint $CAPT_FILES_CHANGED'
    cljsplint      '(clj)splint -o clj-kondo $CAPT_FILES_CHANGED'
    cljfmt         '(clj)cljfmt check $CAPT_FILES_CHANGED'
    # cljfmt         '(clj)cljfmt  $CAPT_FILES_CHANGED'
    cljtest        '(clj)cljtest $CAPT_FILES_CHANGED'
    huglint        '(sql)huglint $CAPT_FILES_CHANGED'
    hugdoc         '(sql)hugdoc $CAPT_FILES_CHANGED'
    wscheck        'wscheck $CAPT_FILES_CHANGED'
    fixcheck       'fixcheck $CAPT_FILES_CHANGED'
    msglint        'msglint "$(cat $GITARG1)"'
    gommit         'gommit check message "$(cat $1)"'
    colorquote     'colorquote'
    br2msg         'br2msg $GITARG1 $GITARG2 $GITARG3'
    migsalert      'migsalert'
)

# TODO Warn on each that is not installed
typeset -A builtin_helps=(
    mdlint         'Check markdown files for various conventional violations (pre-commit)'
    cljlint        'Perform static analysis on Clojure/EDN files without (pre-commit)'
    cljsplint      'Linter style and code shape (pre-commit)'
    cljfmt         'Format clojure files (pre-commit)'
    cljtest        'Run test NSs with existing nrepl conn (pre-commit)'
    huglint        'Detect an error in a HugSQL file using ecpg (pre-commit)'
    hugdoc         'Detect missing docstrings in a HugSQL file (pre-commit)'
    msglint        'Ensure a commit message adheres to a specied standard format (commit-msg)'
    wscheck        'Detect whitespace issues: newlines, BOM, tabs, etc (pre-commit)'
    fixcheck       'Detect FIXMEs, TODOs, etc (pre-commit)'
    gommit         'Ensure your commit messages are consistent (commit-msg)'
    colorquote     'Spew a colorful pirate witticism to signal a successful run (post-commit)'
    br2msg         'Convert current branch name, boilerplate into commit message (prepare-commit-msg)'
    # br2msg         'Infer/use commit message, boilerplate from current branch name (prepare-commit-msg)'
    migsalert      'Notify when pending migrations detected by switching branches (post-checkout)'
)

typeset -A envars=(
    CAPT_VERBOSE        'Unset to disable subcommand output and docstrings'
    CAPT_DISABLE        'Set to ‘1’ to bypass captain doing anything'
    CAPT_DEBUG          'Set to ‘1’ to enable debug mode'
    CAPT_INTERACTIVE    'Set to ‘1’ to enable interactive continuation mode (progress past errors)'
    CAPT_CAVALIER       'Set to ‘1’ to progress past all errors with no remorse'
    CAPT_BLACK_TRIGGERS 'Set to CSV string of individual triggers you wish to disable'
    CAPT_BLACK_HOOKS    'Set to CSV string of individual hooks you wish to disable'
    CAPT_TIMEOUT        'Set to number of seconds allowed for each trigger completion (default 10s)'
    CAPT_FILES_OVERRIDE 'Set to list of files to run on (instead of git-staged)'
    CAPT_MAIN_BRANCH    'Useful for running in CI since default will be feature branch'
    CAPT_FILE           'Team-shared control file containing global hooks/triggers'
    CAPT_LOCALFILE      'User-local personal control file each dev may have (not in git control)'
    CAPT_HOOKSDIR       'Defaults to ‘.capt/hooks’, for pointing ‘git’ to'
    CAPT_SCRIPTSDIR     'Defaults to ‘.capt/scripts’, for storing team-shared triggers'
    CAPT_LOUD_NOOPS     'Print even when triggers have nothing to do (for debugging new triggers)'
)

typeset -A command_helps=(
    help    'Show help with descriptions of built-in triggers'
    init    'Initialize a repo with a capt setup of fresh new config'
    list    'List the active hooks'
    edit    'Open the share.sh (and local.sh if exists) control file'
    scripts 'List available scripts'
)

### 
### Main menu commands: help, list, edit, scripts
if [[ $@[1] == 'help' ]]
then local b e indic
     print "${bold_color}capt$reset_color is a git-hook manager, featuring multiple triggers per hook."
     print 'It is typically run automatically from a git-hook script, such as pre-commit.'
     print
     if   [[ -f $captfile ]]
     then print "Detected a team shared control file:       $bold_color$captfile$reset_color"
     else print "Unable to detect a shared contol file: $bold_color$captfile$reset_color"
          print "You can create one by hand, or use: ${bold_color}capt init$reset_color"
     fi
     [[ -f $captfilelocal ]] &&
          print "Detected your local personal control file: $bold_color$captfilelocal$reset_color"
     print "View/edit hooks/triggers in control files: ${bold_color}capt edit$reset_color"
     # print $builtin_helps
     # print ${builtin_helps[kondo]}
     print "\nBuilt-in available triggers:"
     for b in ${(k)builtin_helps}; do printf '  %-24s%s\n' "${bold_color}$b$reset_color" ${builtin_helps[$b]} ; done
     print '\nCommands:'
     for b in ${(k)command_helps}
     do   if   [[ $b == 'help' ]]
          then printf '  %-24s%s\n' "$fg_bold[green]$b$reset_color" ${command_helps[$b]}
          else printf '  %-21s%s\n' "$bold_color$b$reset_color" ${command_helps[$b]}
          fi
     done
     print '\nEnvironment variables:'
     for e in ${(k)envars}
     do   if   [[ -v $e ]]
          then printf '  %-34s%s\n' "$fg_bold[green]$e$reset_color" ${envars[$e]}
          else printf '  %-31s%s\n' "$bold_color$e$reset_color" ${envars[$e]}
          fi
     done
     if   [[ ! -f .gitmessage ]]
     then print "\nNOTE: You do not have a .gitmessage commit template file."
          print "It’s a convenient way to provide guiding help text during commits. Do this:"
          print "  ${bold_color}echo 'TODO Add some conventions, tips, etc...' > .gitmessage$reset_color"
          print "  ${bold_color}git add .gitmessage && git commit -m 'Add gitmessage template'$reset_color"
     fi
     print "\ncapt version $captversion"
     exit
fi

if  [[ $@[1] == 'init' ]]
then print "Initializing new capt setup...."
     if [[ ! -d .git ]]; then print "Not in a git repo top level??"; exit 1; fi
     if [[ -d $hooksdir ]]; then print "\nDetected that $bold_color$hooksdir$reset_color already exists, so proceeding to only set up your config."; fi
     cur_git_hookspath=$(git config core.hooksPath)
     if [[ $hooksdir == $cur_git_hookspath ]]
     then print "\nGit’s core.hooksPath already set to same hooksdir: $bold_color$hooksdir$reset_color"
     else print "\nCurrent core.hooksPath setting: $bold_color$cur_git_hookspath$reset_color"
          print "\nAltering your git config"
          print -- "=> ${bold_color}git config core.hooksPath $hooksdir$reset_color"
          git config core.hooksPath $hooksdir
     fi
     if [[ -d $hooksdir ]]; then exit; fi
     print "\nCreating new hooksdir: $bold_color$hooksdir$reset_color"
     mkdir -p $hooksdir
     # Create the standard executable git hook files
     print "\nCreating new tiny capt-invoking executable hookfiles in: $bold_color$hooksdir$reset_color"
     for hookfile in $hookfiles
     do
         print 'capt $(basename $0) $@' > $hooksdir/$hookfile
         chmod +x $hooksdir/$hookfile
     done
     print "Created: $hookfiles"
     # Create a shared control file
     if [[ -f $captfile ]]; then print "Oops, captfile $captfile already exists"
                                 exit 1; fi
     print "\nCreating team-shared control file: $bold_color$captfile$reset_color"
     touch $captfile
     cat <<EOS > $captfile
# Captain git-hook manager control file

pre_commit=(
    'hithere: echo $CAPT_FILES_CHANGED ## just print changed files'
    mdlint
    fixcheck
    wscheck
)

commit_msg=( msglint )

prepare_commit_msg=( br2msg )

post_commit=( colorquote )

# Other available hooks
#post-checkout=( ... )
#pre-push=( ... )
#post-rewrite=( ... )
EOS

     print "\nResult of creations:"
     tree -C $hooksdir

     print "\nYou optionally can create a local captfile that contains only your desired hooks:"
     print "  ${bold_color}touch $captfilelocal$reset_color"
     print "\nAnd edit it to resemble the format of shared captfile: $bold_color$captfile$reset_color"
     print "And if you do, you likely should also do:"
     print "  ${bold_color}echo '$captfilelocal' >> .gitignore$reset_color"
     print
     print "IMPORTANT:"
     print "You should now manually run the following:"
     print "  ${bold_color}git add $captfile $hooksdir$reset_color"
     print "  ${bold_color}git commit -m 'Add captain git-hook manager'$reset_color"
     print "\nLearn more about capt usage:"
     print "  ${bold_color}capt help$reset_color"
     exit
fi

if [[ $@[1] == 'version' ]]; then print "capt version $captversion"; fi

# Iterate over supported hooks to list each as active, missing array, missing call in file
list_available_hooks () {
    controller=$1
    arrays=( $(sgrep -e '^[a-z_]\+=(' $controller | ssed -e 's/_/-/g' -e 's/=(.*//') )
    for suphook in $hookfiles
    do  if (( $arrays[(Ie)$suphook] )) # supported hook present in control file
        then local gf=$captdir/hooks/$suphook
             if   [[ -f $gf ]]
             then if sgrep -q '^capt' $gf
                  then printf '  %-32s (file and capt)\n' $fg_bold[green]$suphook$reset_color
                  else printf '  %-32s (missing capt call in file)\n' $fg_bold[yellow]$suphook$reset_color
                  fi
             else printf "  %-32s (missing file: $gf)\n" $fg_bold[magenta]$suphook$reset_color
             fi
        else printf '  %-32s (not in capt)\n'  $fg_bold[gray]$suphook$reset_color
        fi
    done
    for a in $arrays
    do if ! (( $hookfiles[(Ie)$a] ))
       then printf '  %-32s (non-hook)\n' $fg_bold[cyan]$a$reset_color; fi
    done
    print
}
if [[ $@[1] == 'list' ]]; then
    aye "Active hooks in $captfile: (CAPT_FILE)"
    list_available_hooks $captfile
    if   [[ -f $captfilelocal ]]
    then icon='<*‿*>'
         aye "Active hooks in $captfilelocal: (CAPT_LOCALFILE)"
         list_available_hooks $captfilelocal
    else aye "No user-local captfile detected: $captfilelocal (CAPT_LOCALFILE)"
    fi
    print -- '----'
    print "HINT: To see/edit triggers: ${bold_color}capt edit$reset_color"
    print "HINT: To see your scripts:  ${bold_color}capt scripts$reset_color"
    exit
fi

if [[ $@[1] == 'edit' ]]; then
    aye "Opening EDITOR on $captfile $captfilelocal"
    $=EDITOR $captfile $captfilelocal &
    exit
fi

if [[ $@[1] == 'scripts' ]]; then
    aye "Available scripts in $scriptsdir: (CAPT_SCRIPTSDIR)"
    ls -1 $scriptsdir
    exit
fi

if [[ $@[1] == 'COMPLETIONS' ]]; then
    for c in ${(k)command_helps}; do print $c -- $command_helps[$c]; done
    # TODO scan/load both control files, omit settings if any
    print '(NOTE: these are fake and NYI)'
    print 'pre_commit (share)'
    print 'commit_msg (both)'
    print 'post_commit (local)'
    print 'release (share)'
    print 'integration (share)'
    exit
fi

reporoot=$(git rev-parse --show-toplevel 2>/dev/null)
if [[ $? -ne 0 ]]; then
    aye "Captain must be run from the root of a git repo."; exit 1
elif [[ $reporoot != $PWD ]]; then
    aye "Captain only runs from yer repo root: $reporoot"; exit 1
fi

if [[ $#@ < 1 ]]; then
    aye 'Captain needs an arrrg! Try passing a git-hook name, like "pre-commit", or pass "help".'; exit 1
fi

print_banner() {
    print
    if [[ $TERM = 'dumb' ]] # magit
    then print ""
    else print "$fg_bold[blue]————————————————————————————————————————————————————————————————————————————————$reset_color"
    fi
    # aye "$fg_bold[white][$(sdate +%T)] $fg_bold[blue]=== ${(U)active_githook} ===$reset_color ${bold_color}CAPTAIN IS OVERHAULIN. NO QUARTER!$reset_color"
    print -n "$fg_bold[blue]$icon$reset_color" \
          "$fg_bold[blue]⚳⚳⚳ ${(U)active_githook} ⚳⚳⚳$reset_color" \
          "$fg_bold[white][◷ $(sdate +%T)]$reset_color" # uhook
    # aye "$bold_color=== ${(U)active_githook} ===$reset_color\n"
    # print '       _________ '
    # print '      |-_ .-. _-|'
    # print '      |  (*^*)  |'
    # print '      |_-"|H|"-_|'
    # print
}

if [[ ! -f $captfile ]]; then print "Unable to load CAPT_FILE $captfile"; exit 1; fi

# FIXME This could possibly go into print_banner, if `source`ing run first,
# but unlikely since need to source both capt files
active_githook=$1

shortnames() {
    for f in $@; do
        local parts=( ${(s:/:)f} )
        if [[ $#parts > 2 ]]
        then print …${(j:/:)${parts[-2,$#parts]}}
        else print $f
        fi
    done
}

print_filtereds() {
    dbg "filtered files:" $@
    local shorts=( $(shortnames $@) )
    # print " $fg[yellow][${@$(shortnames $@)}]$reset_color"
    if   [[ -n $CAPT_VERBOSE ]]
    then print -n " $fg[yellow][$shorts]$reset_color\n"
    elif [[ $shorts[1] == ∞ ]]
    then print -n " $fg[yellow][∞]$reset_color"
    else print -n " $fg[yellow][$#shorts]$reset_color"; fi
}

# Set up vars to be available in proj capt.zsh, print which files changed
setup_changes() {
    # VALUEADD Magic to figure out main v master and get changed files
    print
    if [[ $TERM = 'dumb' ]] # magit
    then print ""
    else print "$fg_bold[blue]————————————————————————————————————————————————————————————————————————————————$reset_color"
    fi
    if [[ $active_githook == 'integration' ]]; then
        dbg 'Seems we’re in integration mode (but maybe not doing anything about it)'
    fi
    if [[ -n $CAPT_MAIN_BRANCH ]]; then
        aye "Using $CAPT_MAIN_BRANCH as CAPT_MAIN_BRANCH (upstream) since it was set"
        upstream=$CAPT_MAIN_BRANCH
    else
        # Fast and inaccurate https://stackoverflow.com/a/50056710/326516
        # main_branch=$(git branch | sgrep '*' | cut -f2 -d' ')
        # https://stackoverflow.com/a/42570510/326516
        # main_branch=$(git branch -r --points-at refs/remotes/origin/HEAD | sgrep '\->' | cut -d' ' -f5 | cut -d/ -f2)
        # https://stackoverflow.com/a/49384283/326516
        # Setting upstream branch: https://stackoverflow.com/a/37770744/326516
        # main_branch=$(git symbolic-ref --short refs/remotes/origin/HEAD | ssed 's@^origin/@@')
        upstream=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2>/dev/null) || {
            aye "$fg[red]WARNING: Detected that git upstream is not set for this branch. (https://stackoverflow.com/a/37770744/326516)$reset_color"
            # git branch -vv # voluminous output!! grep matches first line which shows:
            # * (no branch, rebasing mde/SCRUM-42885_FEAT_billcov_bwr-comms-endpoint) a9fc3cfe00 Kjo/docrevertrcfix master/scrum 44067 (#10103)
            upstream=$(git branch -vv | sgrep '^\*' | cut -f2 -d' ')
            # Should not ever get here since rebases get aborted immediately
            if [[ $upstream = '(no' ]]; then # must be in a rebase
                upstream=$(git symbolic-ref --short refs/remotes/origin/HEAD)
                print 'hmm, maybe in a rebase; setting upstream to:' $upstream
                print 'but actually exiting because prolly dont wanna be active now'
                exit
            fi
        }

    fi
    # aye "$fg_bold[white][$(sdate +%T)] $fg_bold[blue]=== ${(U)active_githook} ===$reset_color ${bold_color}CAPTAIN IS OVERHAULIN. NO QUARTER!$reset_color"
    print -n "$fg_bold[blue]$icon$reset_color" \
          "$fg_bold[blue]⚳⚳⚳ ${(U)active_githook} ⚳⚳⚳$reset_color" \
          "$fg_bold[white][◷ $(sdate +%T)]$reset_color"

    # if [[ ! $main_branch == (main|master) ]]; then
    #     # This approach is better but slow to reach remote so like to avoid
    #     aye "\nDiscoverin yer MAIN branch remotely, since couldn't determine locally."
    #     aye "You could set CAPT_MAIN_BRANCH to avoid the stall."
    #     # https://stackoverflow.com/a/67170894/326516SX
    #     aye "You should also run this registration since your repo is not a clone:"
    #     aye "git remote set-head origin -a"
    #     main_branch=$(git remote show origin | ssed -n '/HEAD branch/s/.*: //p')
    # fi
    dbg "upstream: $upstream"
    # aye "Branch yer changes are bein compared against: $bold_color$main_branch$reset_color"
    print -n " $fg_bold[magenta][⎇ $upstream]$reset_color"
    # CAPT_FILES_CHANGED=( $(git diff --name-only --cached origin/$main_branch) )
    # CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only --cached $upstream) )
    if [[ $active_githook = 'integration' ]]; then
        # special_integration_upstream=$upstream # remains unset as no-arg for next line
        dbg "Using special upstream for integration run: $bold_color$upstream$reset_color"
        CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only $upstream) )
    else
        CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only --cached) )
    fi
    # Discard files marked for deletion: https://stackoverflow.com/a/52188874/326516
    dels=( $(git status | sgrep 'deleted:' | ssed -r 's/.*deleted: +//') )
    CAPT_FILES_CHANGED_ORIG=( ${CAPT_FILES_CHANGED_ORIG:|dels} )
    if (( $#CAPT_FILES_CHANGED > 0 )); then
        CAPT_FILES_CHANGED=( $CAPT_FILES_CHANGED_ORIG )
        # Print only truncated file names (split on /, take last two of path, join with ellipsis on front)
        # print  CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
        local shorts=( $(shortnames $CAPT_FILES_CHANGED) )
        # print " $fg_bold[yellow][Δ($#CAPT_FILES_CHANGED) $CAPT_FILES_CHANGED]$reset_color" # delta
        print " $fg_bold[yellow][Δ($#CAPT_FILES_CHANGED) $shorts]$reset_color" # delta
    else print
    fi
    # Enable capt running on explicitly specified file(s)
    # CAPT_FILES_OVERRIDE='foo.md hello.clj' capt ...
    if [[ -v CAPT_FILES_OVERRIDE ]]
    then CAPT_FILES_CHANGED_ORIG=( $=CAPT_FILES_OVERRIDE )
         CAPT_FILES_CHANGED=(      $=CAPT_FILES_OVERRIDE )
    fi
    dbg "git-hook arrrgs: $GITARG1 $GITARG2 $GITARG3"
}

# For non-built-ins, look for a trailing help comment docstring ( ## ) and print if exists
print_cmd_and_help () {
    unset helpmsg
    if   [[ -n $CAPT_VERBOSE ]]
    then if sgrep -q ' ## ' <<< $cmd
         then helpmsg=$( ssed 's/^.* ## //' <<< $cmd )
              cmd=$( ssed 's/ ## .*$//' <<< $cmd)
              aye "# $fg[yellow]$helpmsg$reset_color"
              aye "$suit $fg_bold[yellow]$cmd$reset_color"
         else aye "$suit $fg_bold[yellow]$cmd$reset_color"
         fi
    fi
}

# There are 2 filters available: user-specified (front) and built-in (back, after colon)
get_combined_filtereds () {
    # filter1 only applies for user-spec'd
    local filter1 filter2 # start then both empty
    if   [[ $name =~ '\(.+\)' ]]  # remove front name and trailing :, if filter present
    then filter1=$(print $name | ssed 's/.*(/(/;s/://')
    fi
    #                               NAME   FILTER   CMD
    # User spec is like:            mdlint(md|mkd): mdl ...
    # Built-in command DSL is like: mdlint          (md|mkd)mdl ...
    # Set up filter2 (built-in)
    dsl=$builtin_cannons[$print_name]
    if   [[ $dsl =~ '^\(' ]]
    then filter2=$(print $dsl | ssed 's/).*/)/') # built-in filter, if exists
    fi
    # Combine 2 into one: f1='(clj|cljs)' f2='(csv|sql) -> (clj|cljs)(csv|sql) -> (clj|cljs|csv|sql)
    filter=$( ssed -r 's/\)\(/|/' <<< ${filter1}${filter2} )
    dbg "\n" filter: $filter :: CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
    if   [[ $filter != '('* ]]
    then filtered_files=( $CAPT_FILES_CHANGED )
    else filtered_files=( $(print -l $CAPT_FILES_CHANGED | sgrep -E "\.$filter$") )
    fi
    CAPT_FILES_CHANGED=( $filtered_files )
    if [[ $#filtered_files < 1 ]]
    then [[ -v CAPT_LOUD_NOOPS ]] &&
             print "$pending ($suit Not seein any matchin files staged, skippin.)"
         return 1
    else print -n $pending
    fi
}

# Run the scripts from control file
run_scripts () {
    # print active_githook: $active_githook
    # FIXME maybe all the vars (CAPT_FILES_CHANGED etc) should be local since getting reset on every call?
    # TODO check for existence of specified hook and print meaningful message if no/empty hook
    if [[ -z $@ ]]; then aye "No triggers to be run."; return; fi
    # FIXME post-commit hook shows no staged files, so need to only do this check for some hooks
    modified_cnt=$( git diff --name-only --cached |wc -l )
    file_worthy_hooks=( pre-commit )
    if  (( $file_worthy_hooks[(Ie)$active_githook] )) && (( modified_cnt == 0 )) &&
            [[ ! -v CAPT_FILES_OVERRIDE ]]
    then aye "No files staged, ya scabby sea bass."; return
    fi
    if (( $black_hooks[(Ie)$active_githook] )); then
        aye "$fg[red]Stavin’ off yer $active_githook hook since ye blacklisted the varmint (CAPT_BLACK_HOOKS).$reset_color"
        return
    fi
    # Print out all the scripts about to be run
    executors=() cmds_lens=() max_cmd_len=0
    for line in $@; do
        [[ $line == *:* ]] &&
            executors+="$fg_bold[gray]${${(@s/:/)line}[1]}$reset_color" ||
            executors+="$fg_bold[gray]$line$reset_color"
        cmds_lens+=$(print $line | ssed 's/[:( ].*//' | wc -m )
    done
    max_cmd_len=$(print -l $cmds_lens | sort -nr | head -1)
    print; aye "$fg_bold[cyan]☁☁☁ $runlevel ☁☁☁$reset_color $fg_bold[gray][☠ $executors$fg_bold[gray]]$reset_color" # ucloud
    # Run through each trigger
    for line in $@; do
        # Reset for each time through
        CAPT_FILES_CHANGED=( $CAPT_FILES_CHANGED_ORIG )
        dbg CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
        inv=( ${(@s: :)line} ) # split on spaces to get first, discard beyond second
        name=$inv[1]
        # If name starts with - then remove it and treat the run as in fail-ok mode
        unset failok
        if [[ $name[1] = '-' ]]; then name=${name[2,$#name]}; failok=1; fi  # remove first char
        script=$inv[2]
        cmd=${line#* } # remove up to first space, keeping all the rest
        dbg "inv:" $inv[1] "::" $inv[2] "::" $inv[3] "::"
        cmd0=${cmd%% *} # keep only first part, the command name
        # print "line: $line :: cmd0: $cmd0 :: cmd: ${(e)cmd}"

        # TODO Add special casing for specific hooks needing special treatment
        if [[ $active_githook =~ 'commit-msg' ]]; then : ; fi

        # Built-in has filter already, or specified filter
        print_name=$(print $name | ssed 's/[:(].*//' )
        if (( $black_triggers[(Ie)$print_name] ))
        then aye "$fg[red]Snuffin’ out yer $print_name trigger since ye blacklisted the bedeviler (CAPT_BLACK_TRIGGERS).$reset_color"
             continue
        fi
        printf -v pending "$reset_color$fg_bold[blue]$icon$reset_color $fg[yellow]☠☠☠ %-${max_cmd_len}s$reset_color" ${(U)print_name}  # uskull
        # Built-in triggers are the only ones with no colon
        if [[ ! $name == *: ]]
        then dbg "built-in plain checker with no spec:" $name
             suit=♠
             pending="$pending$suit"
             # Need to fix up cmd since no spec, and maybe include filtered files
             script=$inv[1]
             just_buitins=${(k)builtin_cannons}
             if ! (($just_buitins[(Ie)$print_name])); then
                 print; aye "$fg[red]ERROR: Unable to find built-in trigger: $bold_color$print_name$reset_color"
                 exit 1
             fi
             get_combined_filtereds || continue
             cmd=$(print $dsl | ssed -r 's/^\([^)]+\)//')
             cmd0=$(print $cmd | ssed -r 's/ .*//')

             print_filtereds $filtered_files
             # Remove end of help and prep for printing on non-verbose
             helpmsg=$( ssed -r 's/ \(.*\)//' <<< $builtin_helps[$print_name] )
             if   [[ -n $CAPT_VERBOSE ]]
             then aye "# $fg[yellow]$helpmsg$reset_color"
                  aye "$suit $fg_bold[yellow]$cmd$reset_color" # spade, built-in
             fi

        elif [[ $name == *\(*\)* ]]
        then dbg "custom-rigged filtered checker"
             suit=♥
             pending="$pending$suit"
             get_combined_filtereds || continue
             print_filtereds $filtered_files
        elif [[ $line == *CAPT_FILES_CHANGED* || ! $name == *: ]]
        then dbg "unfiltered checker"
             suit=♦
             print -n "$pending$suit"
             filtered_files=( $CAPT_FILES_CHANGED )
             if   [[ $#filtered_files < 1 ]] # FIXME Probably can never get here
             then print " ZZZ $pending ($suit Not seein any matchin files staged, skippin.) ZZZ" ; continue
             else print_filtereds $CAPT_FILES_CHANGED
                  print_cmd_and_help
             fi
        else dbg 'no files, no filter'
             suit=♣
             print -n "$pending$suit"
             print_filtereds ∞
             print_cmd_and_help
        fi

        # Add args to pass from git if it's one of the arg-accepting hooks
        # [[ $active_githook =~ 'commit-msg' ]] && cmd+=' $1 $2'
        t0=$(sdate +%s%3N) # start timer
        # Work with either a local script or something found on path
        dbg "cmd: ${(e)cmd}, cmd0: $cmd0"
        dbg "script: $scriptsdir/$script"
        # Try to find script or command
        # FIXME Some commands print to stderr; need to capture it too; but look out for &
        if   [[ -f $scriptsdir/$script ]]; then output=$(eval timeout $timeout $scriptsdir/$cmd)
        elif type $cmd0 >/dev/null;        then output=$(eval timeout $timeout $cmd)
        # Just skip this one hook if command not found
        else aye "$fg[red]WARNING: Skippin on yer $print_name; $cmd0 and $script be lost at sea.$reset_color"
        fi
        es=$?
        [[ -n $CAPT_VERBOSE && -n $output ]] && print -- "$output"
        if   [[ $es == 124 ]] # special timeout exit code; seems universal
        then print "${fg[red]}Timeout (${timeout}s) occurred (Set it via CAPT_TIMEOUT, 0 to disable)$reset_color"
        fi
        wait # don't process until background scripts are finished
        tfinal=$(( $(sdate +%s%3N) - $t0 )) units=ms units_color=white
        if (( 1000 < $tfinal )); then tfinal=$(( $tfinal / 1000 )); units=s; units_color=red; fi
        # Set failok mode true if interactive response "yes"
        # print TTY:; tty; print
        if   [[ $es -ne 0 && -v CAPT_INTERACTIVE ]]
        # NOTE The [y/n] spec is narrowly accepted as a prompt by magit via `magit-process-yes-or-no-prompt-regexp`
        # NOTE Magit has a limitation/bug where it can only pause once per run, so cannot
        #      proceed past multiple errors
        then prompt="?[CAPT_INTERACTIVE] Command failed; proceed anyway? [y/n] "
             if read -q "$prompt"; then failok=1; fi
        elif [[ $es -ne 0 && -v CAPT_CAVALIER ]]
        # TODO Should maybe print something to indicate bypassing errors; but WOUNDED maybe already enough
        then failok=1
        fi
        # Set diagnostic indicators
        # print "\nfailok:: $failok :: es:: $es"
        if [[ $es -eq 0 ]];       then indicator=green  exclaim='SURVIVAL!'
        elif [[ $failok -eq 1 ]]; then indicator=orange exclaim='WOUNDED! '  wounded=1
        else                           indicator=red    exclaim='DEAD!    '
        fi
        # Bail out on whole run if any script not successful
        if [[ $es -ne 0 && ! -v failok ]]; then
            [[ -z $CAPT_VERBOSE ]] && print "\n${fg_bold[red]}BLIMEY!!!$reset_color\n$output"
            print "\n$fg[red]         "'\\\\'
            print "$fg[red]         (o>     Down to Davey Jones’ locker!"
            print "$fg[red]      ___(()___  Status $es from $print_name"
            print "$fg[red]         ||"
            print "$reset_color"
            aye "Failing command:"
            print  ${(e)cmd}
            exit $es
        else # Proceed!
            if   [[ -n $CAPT_VERBOSE ]]
            then [[ $es -ne 0 ]] && aye "WARN: Errors detected but proceeding anyway since in ‘failok’ mode"
                 aye "$fg[$indicator]⚔⚔⚔ $exclaim ⚔⚔⚔$reset_color" \
                     "$fg[$units_color](⧖ ${tfinal}${units})$reset_color\n"
            else print -n " .........." \
                       "$fg[$indicator]$exclaim$reset_color" \
                       "$fg[$units_color](⧖ ${tfinal}${units})$reset_color\n"
            fi
        fi
    done

    if   [[ -v wounded ]]
    then aye "$fg_bold[orange]⚑⚑⚑ Suffered some scathin’ ya scurvy knave. ⚑⚑⚑ $reset_color"
         [[ -z $CAPT_VERBOSE ]] &&
             aye "Kill yer ${EDITOR-editor} and try again with ‘CAPT_VERBOSE=1’ to see yer folly."
         unset wounded failok
    else aye "$fg_bold[green]⚑⚑⚑ Ye survived the barrage. Musta’ been a fluke. ⚑⚑⚑ $reset_color"
    fi
}

# Run a set of scripts based on which hook is active

select_hook() {
    case $active_githook in
        pre-commit)         run_scripts $pre_commit;         unset pre_commit ;;
        commit-msg)         run_scripts $commit_msg;         unset commit_msg ;;
        post-commit)        run_scripts $post_commit;        unset post_commit ;;
        prepare-commit-msg) run_scripts $prepare_commit_msg; unset prepare_commit_msg ;;
        post-checkout)      run_scripts $post_checkout;      unset post_checkout ;;
        # for alt tasks
        *)                  run_scripts ${(P)1} ;; # interpolate arg to get array contents
    esac }

### Main

# print_banner
setup_changes

# aye "Loadin the whole ship’s arsenal to the gunwales: $captfile\n" # $PWD/$captfile\n
# Run team-wide repo hooks
runlevel=$captfile
source $captfile
# FIXME non-hook tasks not being seen
select_hook $1

# exit_gracefully() { aye $@; exit }
exit_gracefully() { if (( $#@ > 0 )); then print; aye $@; fi; exit }

# dbg "captfilelocal: $captfilelocal"
if [[ -f $captfilelocal ]]; then source $captfilelocal
# else exit_gracefully "No captfilelocal found, so finishin now."
else exit_gracefully
fi

dbg active_githook: $active_githook
# eval "unset ${active_githook:gs/-/_}"
if [[ $active_githook == 'pre-commit'         && -z $pre_commit ]] ||
   [[ $active_githook == 'commit-msg'         && -z $commit_msg ]] ||
   [[ $active_githook == 'post-commit'        && -z $post_commit ]] ||
   [[ $active_githook == 'prepare-commit-msg' && -z $prepare_commit_msg ]] ||
   [[ $active_githook == 'post-checkout'      && -z $post_checkout ]]
then exit_gracefully
fi

# Optionally run user hooks if they exist
if   [[ -f $captfilelocal ]] # Run user-local hooks
then runlevel=$captfilelocal
     icon='<*‿*>'
     select_hook
fi

# TODO Show successful completion with some stats
# print
# aye 'Show a leg!' # => wake up, we're done, succussfully!
