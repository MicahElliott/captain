#! /bin/zsh

# capt: a very simple git-hook manager

# Symbols fer usin:  ⚔ ⚳ ⚑ ☁ ☀ ✓ ◴◵◶◷

# Save the incoming git-hook arg(s)
GITARG1=$argv[2] GITARG2=$argv[3] GITARG3=$argv[4]
# print all args: $@

captdir=${CAPT_DIR-.capt}
hooksdir=${CAPT_HOOKSDIR-$captdir/hooks} # not actually used
scriptsdir=${CAPT_SCRIPTSDIR-$captdir/scripts}
captfile=${CAPT_FILE-$captdir/share.sh}
captfilelocal=${CAPT_LOCALFILE-.capt/local.sh}
path+=$scriptsdir

dbg() { [[ -n $CAPT_DEBUG ]] && print "$fg[cyan]DEBUG:" $@ $reset_color }
# aye() { print '(◕‿-)' $@ }
aye()  { print    "$reset_color$fg_bold[blue](◕‿-)$reset_color" $@ }
ayen() { print -n "$reset_color$fg_bold[blue](◕‿-)$reset_color" $@ } # no newline

[[ -n $CAPT_DISABLE ]] && { print 'Sailin right past yer captain with CAPT_DISABLE bein set.'; exit }

# Convert to arrays for easier use
black_triggers=( ${(s:,:)CAPT_BLACK_TRIGGERS} )
black_hooks=(    ${(s:,:)CAPT_BLACK_HOOKS}    )


# Bail out immediately if rebase in progress
# https://stackoverflow.com/questions/3921409/how-to-know-if-there-is-a-git-rebase-in-progress
branch=$(git branch -vv | head -1) # * (no branch, rebasing ...
if [[ $branch =~ '\* \(no branch, rebasing' ]] ||
       test -d "$(git rev-parse --git-path rebase-merge)" ||
       test -d "$(git rev-parse --git-path rebase-apply)"
then
    aye 'Must be in a rebase, exiting.'
    exit
else
    print "FIXME PLEASE (rebase debugging for br2msg): branch: $branch"
fi

autoload colors; colors

# Built-in convenience checkers
# keys are for lookups
# values are an optional filter, followed by a command to run
# TODO May need a way/syntax to let checks run but ignore that they fail; IOW, proceed despite failure
typeset -A builtin_cannons=(
    'markdownlint' '(md|mkd|markdown)mdl $CAPT_FILES_CHANGED'
    'msglint'      'msglint "$(cat $GITARG1)"'
    'missingnewline' 'missingnewline $CAPT_FILES_CHANGED'
    # 'gommit'       'gommit check message "$(cat $1)"'
    'cljlint'      '(clj|cljc|cljs)clj-kondo --lint $CAPT_FILES_CHANGED'
    'cljfmt'       '(clj)cljfmt check $CAPT_FILES_CHANGED'
    'sqllint'      '(sql)pglint.zsh $CAPT_FILES_CHANGED'
    'cljsplint'    '(clj)splint -o clj-kondo $CAPT_FILES_CHANGED'
    'cljtest'      '(clj)cljtest.zsh $CAPT_FILES_CHANGED'
    'colorquote'   'colorquote'
    'br2msg'       'br2msg $GITARG1 $GITARG2 $GITARG3'
)

typeset -A builtin_helps=(
    markdownlint 'Check markdown files for various conventional violations'
    cljlint 'Perform static analysis on Clojure/EDN files without the need of a running REPL'
    msglint 'Ensure a commit message adheres to a specied standard format'
    cljfmt 'Format clojure files'
)

typeset -A command_helps=(
    help    'show help with descriptions of built-in triggers'
    list    'list the active hooks'
    edit    'open the share.sh (and local.sh if exists) control file'
    scripts 'list available scripts'
)

if [[ $@[1] == 'help' ]]; then
    print 'capt is a git-hook manager, featuring multiple triggers per hook'
    print
    if [[ -f $captfile ]]; then
        print "Detected a team shared control file:       $bold_color$captfile$reset_color"
    else
        print "Unable to detect a shared contol file: $bold_color$captfile$reset_color"
        print "You can create one by hand, or use: ${bold_color}capt setup$reset_color"
    fi
    [[ -f $captfilelocal ]] &&
    print "Detected your local personal control file: $bold_color$captfilelocal$reset_color"
    print "\nUse to view/edit hooks/triggers in control files: ${bold_color}capt edit$reset_color"
    # print $builtin_helps
    # print ${builtin_helps[kondo]}
    print "\nBuilt-in available triggers:"
    for b in ${(k)builtin_helps}; do printf '  %-26s%s\n' "${bold_color}$b$reset_color" ${builtin_helps[$b]} ; done
    print '\nCommands:'
    for b in ${(k)command_helps}; do printf '  %-20s%s\n' "${bold_color}$b$reset_color" ${command_helps[$b]} ; done
    # print "  ${bold_color}list$reset_color     list of all active hooks"
    # print "  ${bold_color}edit$reset_color     see all active triggers in EDITOR"
    # print "  ${bold_color}scripts$reset_color  initialize captain files into project (idempotent)"
    # print "  ${bold_color}setup$reset_color    initialize captain files into project (idempotent)"
    exit
fi

list_available_hooks() {
    controller=$1
    for h in $( grep -e '^[a-z_]\+=(' $controller | sed -e 's/_/-/g' -e 's/=(//' ); do
        print "## $h"
        local gf=$captdir/hooks/$h
        if [[ -f $gf ]]; then cat $gf; else print '<custom hook/command>'; fi
        print
    done
}
if [[ $@[1] == 'list' ]]; then
    aye "Active hooks in $captfile: (CAPT_FILE)"
    list_available_hooks $captfile
    aye "Active hooks in $captfilelocal: (CAPT_LOCALFILE)"
    list_available_hooks $captfilelocal
    print -- '----'
    print "HINT: To see/edit triggers: ${bold_color}capt edit$reset_color"
    print "HINT: To see your scripts:  ${bold_color}capt scripts$reset_color"
    exit
fi

if [[ $@[1] == 'edit' ]]; then
    aye "Opening EDITOR on $captfile $captfilelocal"
    $EDITOR $captfile $captfilelocal &
    exit
fi

if [[ $@[1] == 'scripts' ]]; then
    aye "Available scripts in $scriptsdir: (CAPT_SCRIPTSDIR)"
    ls -1 $scriptsdir
    exit
fi

if [[ $@[1] == 'COMPLETIONS' ]]; then
    for c in ${(k)command_helps}; do print $c -- $command_helps[$c]; done
    # TODO scan/load both control files, omit settings if any
    print '(NOTE: these are fake and NYI)'
    print 'pre_commit (share)'
    print 'commit_msg (both)'
    print 'post_commit (local)'
    print 'release (share)'
    print 'integration (share)'
    exit
fi

# Use s* to mean "system" as in "sgrep" -> "system grep"
if [[ $OSTYPE == darwin* ]] ; then
    if ! type ggrep >/dev/null; then
        print 'Detected that GNU coreutils et al are not installed. You should run:'
        print 'brew install coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep'
        exit 1
    else
        sdate() { gdate $@ }
        sgrep() { ggrep $@ }
        ssed()  { gsed $@ }
        splayer() { afplay $@ }
    fi
else
    sdate() { date $@ }
    sgrep() { grep $@ }
    ssed()  { sed $@ }
    splayer() { play $@ }
fi

reporoot=$(git rev-parse --show-toplevel 2>/dev/null)
if [[ $? -ne 0 ]]; then
    aye "Captain must be run from the root of a git repo."; exit 1
elif [[ $reporoot != $PWD ]]; then
    aye "Captain only runs from yer repo root: $reporoot"; exit 1
fi

if [[ $#@ < 1 ]]; then
    aye 'Captain needs an arrrg! Try passing a git-hook name, like "pre-commit", or pass "help".'; exit 1
fi

print_banner() {
    # print '(◕‿-) Shiver me timbers!'
    print
    print ""
    # aye "$fg_bold[white][$(sdate +%T)] $fg_bold[blue]=== ${(U)active_githook} ===$reset_color ${bold_color}CAPTAIN IS OVERHAULIN. NO QUARTER!$reset_color"
    print -n "$fg_bold[blue](◕‿-)$reset_color" \
          "$fg_bold[blue]☠☠☠ ${(U)active_githook} ☠☠☠$reset_color" \
          "$fg_bold[white][◷ $(sdate +%T)]$reset_color" # skull
    # aye "$bold_color=== ${(U)active_githook} ===$reset_color\n"
    # print '       _________ '
    # print '      |-_ .-. _-|'
    # print '      |  (*^*)  |'
    # print '      |_-"|H|"-_|'
    # print
}

if [[ ! -f $captfile ]]; then print "Unable to load CAPT_FILE $captfile"; exit 1; fi

# FIXME This could possibly go into print_banner, if `source`ing run first,
# but unlikely since need to source both capt files
active_githook=$1
# aghu=$(ssed 's/-/_/g' <<<$active_githook)
# print aghu: $aghu
# [[ -n $"$(eval 'print $aghu')" ]] && print yes: $aghu || print no1
# [[ -n $"$aghu" ]] && print yes: $aghu || print no2
# if [[ -z $active_githook ]]; then
#     print "no hook configured in $captfile or $captfilelocal for $1"
#     # exit
# else
#     print "ok got an active_githook: $active_githook"
# fi

shortnames() {
    for f in $@; do
        local parts=( ${(s:/:)f} )
        if [[ $#parts > 2 ]]
        then print …${(j:/:)${parts[-2,$#parts]}}
        else print $f
        fi
    done
}

print_filtereds() {
    dbg "filtered files:" $@
    local shorts=( $(shortnames $@) )
    # print " $fg[yellow][${@$(shortnames $@)}]$reset_color"
    if [[ -n $CAPT_VERBOSE ]]
    then print -n " $fg[yellow][$shorts]$reset_color\n"
    elif [[ $shorts[1] == ∞ ]]
    then print -n " $fg[yellow][∞]$reset_color"
    else print -n " $fg[yellow][$#shorts]$reset_color"; fi
}

# Set up vars to be available in proj capt.zsh, print which files changed
setup_changes() {
    # VALUEADD Magic to figure out main v master and get changed files
    print
    print ""
    if [[ $active_githook == 'integration' ]]; then
        dbg 'Seems we’re in integration mode (but maybe not doing anything about it)'
    fi
    if [[ -n $CAPT_MAIN_BRANCH ]]; then
        aye "Using $CAPT_MAIN_BRANCH as CAPT_MAIN_BRANCH (upstream) since it was set"
        upstream=$CAPT_MAIN_BRANCH
    else
        # Fast and inaccurate https://stackoverflow.com/a/50056710/326516
        # main_branch=$(git branch | sgrep '*' | cut -f2 -d' ')
        # https://stackoverflow.com/a/42570510/326516
        # main_branch=$(git branch -r --points-at refs/remotes/origin/HEAD | sgrep '\->' | cut -d' ' -f5 | cut -d/ -f2)
        # https://stackoverflow.com/a/49384283/326516
        # Setting upstream branch: https://stackoverflow.com/a/37770744/326516
        # main_branch=$(git symbolic-ref --short refs/remotes/origin/HEAD | ssed 's@^origin/@@')
        upstream=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2>/dev/null) || {
            aye "$fg[red]WARNING: Detected that git upstream is not set for this branch. (https://stackoverflow.com/a/37770744/326516)$reset_color"
            # git branch -vv # voluminous output!! grep matches first line which shows:
            # * (no branch, rebasing mde/SCRUM-42885_FEAT_billcov_bwr-comms-endpoint) a9fc3cfe00 Kjo/docrevertrcfix master/scrum 44067 (#10103)
            upstream=$(git branch -vv | sgrep '^\*' | cut -f2 -d' ')
            # Should not ever get here since rebases get aborted immediately
            if [[ $upstream = '(no' ]]; then # must be in a rebase
                upstream=$(git symbolic-ref --short refs/remotes/origin/HEAD)
                print 'hmm, maybe in a rebase; setting upstream to:' $upstream
                print 'but actually exiting because prolly dont wanna be active now'
                exit
            fi
        }

    fi
    # aye "$fg_bold[white][$(sdate +%T)] $fg_bold[blue]=== ${(U)active_githook} ===$reset_color ${bold_color}CAPTAIN IS OVERHAULIN. NO QUARTER!$reset_color"
    print -n "$fg_bold[blue](◕‿-)$reset_color" \
          "$fg_bold[blue]☠☠☠ ${(U)active_githook} ☠☠☠$reset_color" \
          "$fg_bold[white][◷ $(sdate +%T)]$reset_color"

    # if [[ ! $main_branch == (main|master) ]]; then
    #     # This approach is better but slow to reach remote so like to avoid
    #     aye "\nDiscoverin yer MAIN branch remotely, since couldn't determine locally."
    #     aye "You could set CAPT_MAIN_BRANCH to avoid the stall."
    #     # https://stackoverflow.com/a/67170894/326516SX
    #     aye "You should also run this registration since your repo is not a clone:"
    #     aye "git remote set-head origin -a"
    #     main_branch=$(git remote show origin | ssed -n '/HEAD branch/s/.*: //p')
    # fi
    dbg "upstream: $upstream"
    # aye "Branch yer changes are bein compared against: $bold_color$main_branch$reset_color"
    print -n " $fg_bold[magenta][⎇ $upstream]$reset_color"
    # CAPT_FILES_CHANGED=( $(git diff --name-only --cached origin/$main_branch) )
    # CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only --cached $upstream) )
    if [[ $active_githook = 'integration' ]]; then
        # special_integration_upstream=$upstream # remains unset as no-arg for next line
        dbg "Using special upstream for integration run: $bold_color$upstream$reset_color"
        CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only $upstream) )
    else
        CAPT_FILES_CHANGED_ORIG=( $(git diff --name-only --cached) )
    fi
    CAPT_FILES_CHANGED=( $CAPT_FILES_CHANGED_ORIG )
    # aye "[Δ Staged files changed ($#CAPT_FILES_CHANGED)]: $bold_color$CAPT_FILES_CHANGED$reset_color"
    if (( $#CAPT_FILES_CHANGED > 0 )); then
        # Print only truncated file names (split on /, take last two of path, join with ellipsis on front)
        # print xxx CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
        local shorts=( $(shortnames $CAPT_FILES_CHANGED) )
        # print " $fg_bold[yellow][Δ($#CAPT_FILES_CHANGED) $CAPT_FILES_CHANGED]$reset_color" # delta
        print " $fg_bold[yellow][Δ($#CAPT_FILES_CHANGED) $shorts]$reset_color" # delta
    else print; fi
    dbg "git-hook arrrgs: $GITARG1 $GITARG2 $GITARG3"
}

# Run the scripts from control file
run_scripts () {
    print active_githook: $active_githook
    # FIXME maybe all the vars (CAPT_FILES_CHANGED etc) should be local since getting reset on every call?
    # TODO check for existence of specified hook and print meaningful message if no/empty hook
    if [[ -z $@ ]]; then aye "No triggers to be run."; return; fi
    if (( $black_hooks[(Ie)$active_githook] )); then
        aye "$fg[red]Stavin’ off yer $active_githook hook since ye blacklisted the varmint (CAPT_BLACK_HOOKS).$reset_color"
        return
    fi
    # Print out all the scripts about to be run
    executors=() cmds_lens=() max_cmd_len=0
    for line in $@; do
        [[ $line == *:* ]] &&
            executors+="$fg_bold[gray]${${(@s/:/)line}[1]}$reset_color" ||
            executors+="$fg_bold[gray]$line$reset_color"
        cmds_lens+=$(print $line | ssed 's/[:( ].*//' | wc -m )
    done
    max_cmd_len=$(print -l $cmds_lens | sort -nr | head -1)
    # print max_cmd_len: $max_cmd_len
    # print; aye "$fg_bold[cyan][$runlevel]$reset_color Execution awaits! $executors"
    # printf '\xc'; print "" # no luck with printing line for pagebreak/formfeed in magit
    print; aye "$fg_bold[cyan]☁☁☁ $runlevel ☁☁☁$reset_color $fg_bold[gray][⚳ $executors$fg_bold[gray]]$reset_color" # ucloud

    # for line in $@; do
    #     [[ $line == *:* ]] &&
    #         aye "- $bold_color${${(@s/:/)line}[1]}$reset_color" ||
    #         aye "- $bold_color$line$reset_color"
    # done

    for line in $@; do
        # Reset for each time through
        CAPT_FILES_CHANGED=( $CAPT_FILES_CHANGED_ORIG )
        dbg xxx CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
        inv=( ${(@s: :)line} ) # split on spaces to get first, discard beyond second
        name=$inv[1]
        # TODO(#1) failok mode
        # If name starts with - then remove it and treat the run as in fail-ok mode
        unset failok
        if [[ $name[1] = '-' ]]; then
            name=${name[2,$#name]} # remove first char
            failok=1
        fi
        script=$inv[2]
        cmd=${line#* } # remove up to first space, keeping all the rest
        dbg "inv:" $inv[1] "::" $inv[2] "::" $inv[3] "::"
        cmd0=${cmd%% *} # keep only first part, the command name
        dbg "line: $line :: cmd0: $cmd0 :: cmd: $cmd"

        # Built-in has filter already, or specified filter
        # print_name=$(ssed 's/[:(].*//' <<<$name)
        print_name=$(print $name | ssed 's/[:(].*//' )
        # print name: $print_name :: hooks: $black_triggers
        if (( $black_triggers[(Ie)$print_name] )); then
            aye "$fg[red]Snuffin’ out yer $print_name trigger since ye blacklisted the bedeviler (CAPT_BLACK_TRIGGERS).$reset_color"
            continue
        fi
        # print
        # ayen "$fg[yellow]⚳⚳⚳ ${(U)print_name} $reset_color" # uhooks
        # printf "      $fg[yellow]⚳⚳⚳ %-${max_cmd_len}s$reset_color" ${(U)print_name}  # uhooks
        printf "$reset_color$fg_bold[blue](◕‿-)$reset_color $fg[yellow]⚳⚳⚳ %-${max_cmd_len}s$reset_color" ${(U)print_name}  # uhooks
        if [[ ! $name == *: ]]; then dbg "built-in plain checker with no spec:" $name
            suit=♠; print -n " $suit"
            # Need to fix up cmd since no spec, and maybe include filtered files
            script=$inv[1]
            just_buitins=${(k)builtin_cannons}
            if ! (($just_buitins[(Ie)$name])); then
                print; aye "$fg[red]ERROR: Unable to find built-in trigger: $bold_color$name$reset_color" ; exit 1
            fi
            #              NAME        FILTER    CMD
            # User spec is like:    markdownlint(md|mkd): mdl ...
            # DSL is actually like: (md|mkd)mdl ...
            dsl=$builtin_cannons[$name]
            filter=$(print $dsl | ssed 's/).*/)/')
            # print xxx $filter
            # non-greedy, just the very first part up to (, and remove ending arg(s)
            cmd=$(print $dsl | ssed -r 's/^\([^)]+\)//')
            cmd0=$(print $cmd | ssed -r 's/ .*//')
            dbg "cmd0: "$cmd0
            # Many antics follow to handle filters and changes for built-ins
            if [[ $filter != '('* ]]
               # FIXME Remove filtered_files altogether and just keep rewriting CAPT_FILES_CHANGED
            then filtered_files=( $CAPT_FILES_CHANGED )
            else filtered_files=( $(print -l $CAPT_FILES_CHANGED | sgrep -E "\.$filter$") ); fi
            if [[ $#filtered_files < 1 && -n $CAPT_FILES_CHANGED ]]; then
                print " ($suit Not seein any matchin files staged, skippin.)"
                continue
            fi
            # TODO Add special casing for specific hooks needing special treatment
            if [[ $active_githook =~ 'commit-msg' ]]; then : ; fi

            CAPT_FILES_CHANGED=( $filtered_files )
            # cmd="$cmd $filtered_files"
            print_filtereds $filtered_files
            # aye "Ahoy! Aimin the captain’s built-in $print_name: $bold_color$cmd$reset_color"
            [[ -n $CAPT_VERBOSE ]] && aye "$suit $fg_bold[yellow]$cmd$reset_color" # spade, built-in

        elif [[ $name == *\(*\)* ]]; then dbg "custom-rigged filtered checker"
            suit=♥; print -n " $suit"
            filter=$(print $name | ssed 's/.*(/(/;s/://') # remove front name and trailing :
            dbg filter: $filter
            dbg CAPT_FILES_CHANGED: $CAPT_FILES_CHANGED
            filtered_files=( $(print -l $CAPT_FILES_CHANGED | sgrep -E "\.$filter$") )
            CAPT_FILES_CHANGED=( $filtered_files )
            if [[ $#filtered_files < 1 ]]; then print " ($suit Not seein any matchin files staged, skippin.)"; continue
            else
                print_filtereds $filtered_files
                [[ -n $CAPT_VERBOSE ]] && aye "$suit $fg_bold[yellow]$cmd$reset_color" # heart, custom filter
            fi
        elif [[ $line == *CAPT_FILES_CHANGED* || ! $name == *: ]]; then dbg "unfiltered checker"
            suit=♦; print -n " $suit"
            filtered_files=( $CAPT_FILES_CHANGED )
            if [[ $#filtered_files < 1 ]]; then print " ($suit Not seein any matchin files staged, skippin.)"; continue
            else
                print_filtereds $CAPT_FILES_CHANGED
                [[ -n $CAPT_VERBOSE ]] && aye "$suit $fg_bold[yellow]$cmd$reset_color" # diamond, unfiltered
            fi
        else
            suit=♣; print -n " $suit"
            # print; aye "Ye took care of file selection yerself, or no files needin fer sayin."
            print_filtereds ∞
            # print " $fg[yellow][∞]$reset_color"
            # aye "Doubloons! Aimin yer $print_name: $bold_color$cmd$reset_color"
            [[ -n $CAPT_VERBOSE ]] && aye "$suit $fg_bold[yellow]$cmd$reset_color" # club, self
        fi

        # Add args to pass from git if it's one of the arg-accepting hooks
        # [[ $active_githook =~ 'commit-msg' ]] && cmd+=' $1 $2'
        t0=$(sdate +%s%3N) # start timer
        # Work with either a local script or something found on path
        dbg "cmd: $cmd, cmd0: $cmd0"
        dbg "script: $scriptsdir/$script"
        # Try to find script or command
        if [[ -f $scriptsdir/$script ]]; then output=$(eval $scriptsdir/$cmd)
        elif type $cmd0 >/dev/null;      then output=$(eval $cmd)
        # Just skip this one hook if command not found
        else aye "$fg[red]WARNING: Skippin on yer $print_name; $cmd0 and $script be lost at sea.$reset_color"
        fi
        es=$?
        [[ -n $CAPT_VERBOSE && -n $output ]] && print -- "$output"
        wait # don't process until background scripts are finished
        tfinal=$(( $(sdate +%s%3N) - $t0 )) units=ms units_color=white
        if (( 1000 < $tfinal )); then tfinal=$(( $tfinal / 1000 )); units=s; units_color=red; fi
        # Bail out on whole run if any script not successful
        if [[ $es -ne 0 && ! -v failok ]]; then
            [[ -z $CAPT_VERBOSE ]] && print "\nFAIL: $output"
            # print "$fg[red]    ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀"
            # print "$fg[red]    ⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⡿⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀"
            # print "$fg[red]    ⠀⣠⣤⣶⣶⣿⣿⣿⣿⣯⠀⠀⣽⣿⣿⣿⣿⣷⣶⣤⣄⠀"
            # print "$fg[red]    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⡅⠉⠉⢨⣿⣿⣿⣿⣿⣿⣿⣿⡇"
            # print "$fg[red]    ⠈⠻⣿⣿⣿⣿⣿⣿⣿⣥⣴⣦⣬⣿⣿⣿⣿⣿⣿⣿⠟⠁"
            # print "$fg[red]    ⠀⠀⢸⣿⡿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⠿⢿⣿⡇⠀⠀"
            # print "$fg[red]    ⠀⣠⣾⣿⠂⠀⠀⣤⣄⠀⠀⢰⣿⣿⣿⣿⡆⠐⣿⣷⣄⠀"
            # print "$fg[red]    ⠀⣿⣿⡀⠀⠀⠈⠿⠟⠀⠀⠈⠻⣿⣿⡿⠃⠀⢀⣿⣿⠀"
            # print "$fg[red]    ⠀⠘⠻⢿⣷⡀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⢀⣾⡿⠟⠃⠀"
            # print "$fg[red]    ⠀⠀⠀⠸⣿⣿⣷⣦⣾⣿⣿⣿⣿⣦⣴⣾⣿⣿⡇⠀⠀⠀Down to Davey Jones’ locker!"
            # print "$fg[red]    ⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀Status: $es"
            # print "$fg[red]    ⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀"
            # print "$fg[red]    ⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀"
            print "\n$fg[red]         "'\\\\'
            print "$fg[red]         (o>     Down to Davey Jones’ locker!"
            print "$fg[red]      ___(()___  Status $es"
            print "$fg[red]         ||"
            print "$reset_color"
            exit $es
            # aye '\(ˆ˚ˆ)/ <>_<> (-_- ;) ˚∆˚ Shiver me timbers, down to Davey Jones locker! Status:' $es; print; exit $es
        else
            if [[ $es -ne 0 ]]; then aye "WARN: Errors detected but proceeding anyway since in failok mode"; fi
            if [[ -n $CAPT_VERBOSE ]]; then
                aye "$fg[green]⚔⚔⚔ SURVIVAL! ⚔⚔⚔$reset_color" \
                    "$fg[$units_color](⧖ ${tfinal}${units})$reset_color\n"
            else
                print -n " .........." \
                      "$fg[green]SURVIVAL!$reset_color" \
                      "$fg[$units_color](⧖ ${tfinal}${units})$reset_color\n"
            fi
        fi
    done

    aye "$fg_bold[green]⚑⚑⚑ Ye survived the barrage. Musta been a fluke. ⚑⚑⚑ $reset_color"
}

# Run a set of scripts based on which hook is active

select_hook() {
    case $active_githook in
        pre-commit)         run_scripts $pre_commit;         unset pre_commit ;;
        commit-msg)         run_scripts $commit_msg;         unset commit_msg ;;
        post-commit)        run_scripts $post_commit;        unset post_commit ;;
        prepare-commit-msg) run_scripts $prepare_commit_msg; unset prepare_commit_msg ;;
        post-checkout)      run_scripts $post_checkout;      unset post_checkout ;;
        # for alt tasks
        *)                  run_scripts ${(P)1} ;; # interpolate arg to get array contents
    esac }

### Main

# print_banner
setup_changes

# aye "Loadin the whole ship’s arsenal to the gunwales: $captfile\n" # $PWD/$captfile\n
# Run team-wide repo hooks
runlevel=$captfile
source $captfile
# FIXME non-hook tasks not being seen
select_hook $1

# exit_gracefully() { aye $@; exit }
exit_gracefully() { if (( $#@ > 0 )); then print; aye $@; fi; exit }

# dbg "captfilelocal: $captfilelocal"
if [[ -f $captfilelocal ]]; then source $captfilelocal
else exit_gracefully "No captfilelocal found, so finishin now."; fi

dbg active_githook: $active_githook
# dbg post_checkout: $post_checkout
# eval "unset ${active_githook:gs/-/_}"
if [[ $active_githook == 'pre-commit'         && -z $pre_commit ]] ||
   [[ $active_githook == 'commit-msg'         && -z $commit_msg ]] ||
   [[ $active_githook == 'post-commit'        && -z $post_commit ]] ||
   [[ $active_githook == 'prepare-commit-msg' && -z $prepare_commit_msg ]] ||
   [[ $active_githook == 'post-checkout'      && -z $post_checkout ]]; then
    exit_gracefully
fi

# Optionally run user hooks if they exist
if [[ -f $captfilelocal ]]; then
    # Run user-local hooks
    # print
    # print "         \\"
    # print "         (o> "
    # print "      ___(()___"
    # print "         ||"
    # print
    # date
    # aye "Next on the plank: user-local hook scripts"
    # aye "Now loadin yer local muskets: $PWD/$captfilelocal\n"
    runlevel=$captfilelocal
    select_hook
fi

# Show successful completion
# print
# aye 'Show a leg!' # => wake up, we're done, succussfully!
